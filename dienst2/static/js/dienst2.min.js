(function(){var $;$=window.jQuery,angular.module("dienst2",[]).factory("Tastypie",["$http","$rootScope",function($http){var Tastypie,report,throwError;return throwError=function(data,status,headers,config){throw alert("Server communication failed."),{message:"Server communication failed.",status:status,config:config}},report=function(callback){return callback?callback:throwError},Tastypie=function(api_root){var Model,process,processAll;return process=function(data){return new Model(data)},processAll=function(data){var models,next,previous;return models=[],angular.forEach(data.objects,function(data){return models.push(new Model(data))}),data.meta&&(next=function(success){return $http({method:"GET",url:data.meta.next}).error(report()).success(function(data){return success(processAll(data))})},models.next=data.meta.next?next:!1,previous=function(success){return $http({method:"GET",url:data.meta.previous}).error(report()).success(function(data){return success(processAll(data))})},models.previous=data.meta.previous?previous:!1,models.total_count=data.meta.total_count),models},Model=function(data){return data=data||{},angular.extend(this,{_saved:data},data)},Model.prototype.changed=function(){var changed,obj;return obj=this,changed=!1,angular.forEach(Object.keys(obj._saved),function(key){return obj[key]!==obj._saved[key]?changed=!0:void 0}),changed},Model.api_root=api_root,Model._more=function(data,success){return $http(data).error(report).success(function(data){return success(processAll(data))})},Model._one=function(data,success){return $http(data).error(report).success(function(data){return success(process(data))})},Model.get=function(id,success){return Model._one({method:"GET",url:Model.api_root+id+"/"},success)},Model.all=function(success){return Model._more({method:"GET",url:Model.api_root,params:{limit:10}},success)},Model.search=function(query,success,mod){return mod||(mod="default"),Model._more({method:"GET",url:Model.api_root+"search/",params:{q:query,mod:mod}},success)},Model.getSubresource=function(url,success){return url?Model._one({method:"GET",url:url},success):success(null)},Model.prototype.create=function(success,error){var model;return model=this,$http({method:"POST",url:Model.api_root,data:this}).error(report(error)).success(function(data){return data=process(data),angular.extend(model,data),model._saved=data,success?success(model):void 0})},Model.prototype.update=function(success,error){var model;return model=this,$http({method:"PUT",url:model.resource_uri,data:this}).error(report(error)).success(function(data){return data=process(data),angular.extend(model,data),model._saved=data,success?success(model):void 0})},Model.prototype.remove=function(success,error){var model;return model=this,$http({method:"DELETE",url:model.resource_uri}).error(report(error)).success(function(){return success?success():void 0})},Model}}]).value("$strap.config",{datepicker:{format:"yyyy-mm-dd"}}),angular.module("typeahead",[]).directive("chSelector",["$parse",function($parse){return{restrict:"A",require:"?ngModel",link:function(scope,element,attrs,controller){var ModelGetter,ModelListgetter,ModelSetter,setModel,typeahead,values;return ModelGetter=$parse(attrs.ngModel+"_model"),ModelSetter=ModelGetter.assign,ModelListgetter=$parse(attrs.chSelector),values=ModelListgetter(scope),scope.$watch(attrs.chSelector,function(newValue,oldValue){return newValue!==oldValue?values=newValue:void 0}),element.attr("data-provide","typeahead"),setModel=function(item){return ModelSetter(scope,item),scope.$digest()},element.typeahead({source:function(){return angular.isFunction(values)?values.apply(null,arguments):values},items:attrs.items||10,minLength:attrs.minLength||1,matcher:function(){return!0},sorter:function(items){return items},updater:function(item){return setModel(item),element.one("focus",function(){}),""+item},highlighter:function(item){var query;return query=this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&"),(""+item).replace(RegExp("("+query+")","ig"),function($1,match){return"<strong>"+match+"</strong>"})}}),typeahead=element.data("typeahead"),typeahead.select=function(){var model;return model=this.$menu.find(".active").data("typeahead-model"),this.$element.val(this.updater(model)).change(),this.hide()},typeahead.render=function(items){var that;return that=this,items=$(items).map(function(i,item){return i=$(that.options.item).data("typeahead-model",item),i.find("a").html(that.highlighter(item)),i[0]}),items.first().addClass("active"),this.$menu.html(items),this},controller.$formatters.push(function(obj){return obj?""+obj:""})}}}]),$.fn.spin=function(opts){return this.each(function(){var $this,data;return $this=$(this),data=$this.data(),data.spinner?(data.spinner.stop(),delete data.spinner):opts!==!1?data.spinner=new Spinner($.extend({color:$this.css("color")},opts)).spin(this):void 0}),this},angular.module("dienst2.forms",[]).directive("chEditable",["$http","$templateCache","$anchorScroll","$compile",function($http,$templateCache,$anchorScroll,$compile){return{restrict:"A",terminal:!0,scope:{model:"=chModel",placeholder:"@chPlaceholder",classList:"@chClass",serializer:"&chSerializer",unserializer:"&chUnserializer"},compile:function(element,attr){var placeholder,type;return type=attr.chTemplate,placeholder=attr.chPlaceholder||"",function(scope,element){return scope.classes={},scope.$watch("classList",function(classList){return classList?angular.forEach(classList.split(" "),function(className){return scope.classes[className]=!0}):void 0}),scope.$parent.$watch("editmode",function(editmode){return scope.editmode=editmode}),$http.get(window.prefix+"partials/form/"+type+".html",{cache:$templateCache}).success(function(response){return element.html(response),$compile(element.contents())(scope)})}}}}]).directive("chDate",["$filter",function($filter){return{restrict:"A",require:"ngModel",link:function(scope,element,attr,ngModel){var datefilter,fromUser,toUser;return datefilter=$filter("date"),fromUser=function(text){var match,out,regex;return out=void 0,regex=/^(0?[1-9]|[12][0-9]|3[01])[\-](0?[1-9]|1[012])[\-](\d{4})$/,text&&(match=text.match(regex))&&(out=match[3]+"-"+match[2]+"-"+match[1]),out},toUser=function(text){return datefilter(text,"dd-MM-yyyy")},ngModel.$parsers.push(fromUser),ngModel.$formatters.push(toUser)}}}]).value("country_list",{AF:"Afghanistan",AX:"Ã…land Islands",AL:"Albania",DZ:"Algeria",AS:"American Samoa",AD:"Andorra",AO:"Angola",AI:"Anguilla",AQ:"Antarctica",AG:"Antigua and Barbuda",AR:"Argentina",AM:"Armenia",AW:"Aruba",AU:"Australia",AT:"Austria",AZ:"Azerbaijan",BS:"Bahamas",BH:"Bahrain",BD:"Bangladesh",BB:"Barbados",BY:"Belarus",BE:"Belgium",BZ:"Belize",BJ:"Benin",BM:"Bermuda",BT:"Bhutan",BO:"Bolivia",BA:"Bosnia and Herzegovina",BW:"Botswana",BV:"Bouvet Island",BR:"Brazil",IO:"British Indian Ocean Territory",BN:"Brunei Darussalam",BG:"Bulgaria",BF:"Burkina Faso",BI:"Burundi",KH:"Cambodia",CM:"Cameroon",CA:"Canada",CV:"Cape Verde",KY:"Cayman Islands",CF:"Central African Republic",TD:"Chad",CL:"Chile",CN:"China",CX:"Christmas Island",CC:"Cocos (Keeling) Islands",CO:"Colombia",KM:"Comoros",CG:"Congo",CD:"Congo, The Democratic Republic of The",CK:"Cook Islands",CR:"Costa Rica",CI:"Cote D'ivoire",HR:"Croatia",CU:"Cuba",CY:"Cyprus",CZ:"Czech Republic",DK:"Denmark",DJ:"Djibouti",DM:"Dominica",DO:"Dominican Republic",EC:"Ecuador",EG:"Egypt",SV:"El Salvador",GQ:"Equatorial Guinea",ER:"Eritrea",EE:"Estonia",ET:"Ethiopia",FK:"Falkland Islands (Malvinas)",FO:"Faroe Islands",FJ:"Fiji",FI:"Finland",FR:"France",GF:"French Guiana",PF:"French Polynesia",TF:"French Southern Territories",GA:"Gabon",GM:"Gambia",GE:"Georgia",DE:"Germany",GH:"Ghana",GI:"Gibraltar",GR:"Greece",GL:"Greenland",GD:"Grenada",GP:"Guadeloupe",GU:"Guam",GT:"Guatemala",GG:"Guernsey",GN:"Guinea",GW:"Guinea-bissau",GY:"Guyana",HT:"Haiti",HM:"Heard Island and Mcdonald Islands",VA:"Holy See (Vatican City State)",HN:"Honduras",HK:"Hong Kong",HU:"Hungary",IS:"Iceland",IN:"India",ID:"Indonesia",IR:"Iran, Islamic Republic of",IQ:"Iraq",IE:"Ireland",IM:"Isle of Man",IL:"Israel",IT:"Italy",JM:"Jamaica",JP:"Japan",JE:"Jersey",JO:"Jordan",KZ:"Kazakhstan",KE:"Kenya",KI:"Kiribati",KP:"Korea, Democratic People's Republic of",KR:"Korea, Republic of",KW:"Kuwait",KG:"Kyrgyzstan",LA:"Lao People's Democratic Republic",LV:"Latvia",LB:"Lebanon",LS:"Lesotho",LR:"Liberia",LY:"Libyan Arab Jamahiriya",LI:"Liechtenstein",LT:"Lithuania",LU:"Luxembourg",MO:"Macao",MK:"Macedonia, The Former Yugoslav Republic of",MG:"Madagascar",MW:"Malawi",MY:"Malaysia",MV:"Maldives",ML:"Mali",MT:"Malta",MH:"Marshall Islands",MQ:"Martinique",MR:"Mauritania",MU:"Mauritius",YT:"Mayotte",MX:"Mexico",FM:"Micronesia, Federated States of",MD:"Moldova, Republic of",MC:"Monaco",MN:"Mongolia",ME:"Montenegro",MS:"Montserrat",MA:"Morocco",MZ:"Mozambique",MM:"Myanmar",NA:"Namibia",NR:"Nauru",NP:"Nepal",NL:"Netherlands",AN:"Netherlands Antilles",NC:"New Caledonia",NZ:"New Zealand",NI:"Nicaragua",NE:"Niger",NG:"Nigeria",NU:"Niue",NF:"Norfolk Island",MP:"Northern Mariana Islands",NO:"Norway",OM:"Oman",PK:"Pakistan",PW:"Palau",PS:"Palestinian Territory, Occupied",PA:"Panama",PG:"Papua New Guinea",PY:"Paraguay",PE:"Peru",PH:"Philippines",PN:"Pitcairn",PL:"Poland",PT:"Portugal",PR:"Puerto Rico",QA:"Qatar",RE:"Reunion",RO:"Romania",RU:"Russian Federation",RW:"Rwanda",SH:"Saint Helena",KN:"Saint Kitts and Nevis",LC:"Saint Lucia",PM:"Saint Pierre and Miquelon",VC:"Saint Vincent and The Grenadines",WS:"Samoa",SM:"San Marino",ST:"Sao Tome and Principe",SA:"Saudi Arabia",SN:"Senegal",RS:"Serbia",SC:"Seychelles",SL:"Sierra Leone",SG:"Singapore",SK:"Slovakia",SI:"Slovenia",SB:"Solomon Islands",SO:"Somalia",ZA:"South Africa",GS:"South Georgia and The South Sandwich Islands",ES:"Spain",LK:"Sri Lanka",SD:"Sudan",SR:"Suriname",SJ:"Svalbard and Jan Mayen",SZ:"Swaziland",SE:"Sweden",CH:"Switzerland",SY:"Syrian Arab Republic",TW:"Taiwan, Province of China",TJ:"Tajikistan",TZ:"Tanzania, United Republic of",TH:"Thailand",TL:"Timor-leste",TG:"Togo",TK:"Tokelau",TO:"Tonga",TT:"Trinidad and Tobago",TN:"Tunisia",TR:"Turkey",TM:"Turkmenistan",TC:"Turks and Caicos Islands",TV:"Tuvalu",UG:"Uganda",UA:"Ukraine",AE:"United Arab Emirates",GB:"United Kingdom",US:"United States",UM:"United States Minor Outlying Islands",UY:"Uruguay",UZ:"Uzbekistan",VU:"Vanuatu",VE:"Venezuela",VN:"Viet Nam",VG:"Virgin Islands, British",VI:"Virgin Islands, U.S.",WF:"Wallis and Futuna",EH:"Western Sahara",YE:"Yemen",ZM:"Zambia",ZW:"Zimbabwe"})}).call(this);